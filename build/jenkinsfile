pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_VERSION', defaultValue: 'latest', description: 'Docker Image Version')
    }
    
    environment {
        DOCKER_IMAGE = "vikasprince30809/myapp:${params.IMAGE_VERSION}"
        NEXUS_REPO = "http://nexus.example.com/repository/npm-hosted/"
        GIT_REPO = "https://github.com/your-repo/k8s-deployment.git"
        SONAR_HOME = tool name: 'sonar-scanner', type: 'ToolType'
    }

    stages {
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Parallel Code Quality & Security Checks') {
            parallel {
                stage('ESLint Code Quality Analysis') {
                    steps {
                        sh 'npm run lint | tee eslint-report.log'
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'eslint-report.log'
                        }
                    }
                }
                
                stage('Mocha Test Cases') {
                    steps {
                        sh 'npx mocha --reporter mochawesome --reporter-options reportDir=mocha-reports,reportFilename=mocha-report'
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'mocha-reports/*.json, mocha-reports/*.html'
                        }
                    }
                }
                
                stage('Trivy Filesystem Scan') {
                    steps {
                        sh 'trivy fs  --format json -o trivy-filesystem.json .'
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'trivy-filesystem.json'
                        }
                    }
                }
            }
        }

        stage('SonarQube Code Quality Scan') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh """

                         ${SONAR_HOME}/bin/sonar-scanner 
                        -Dsonar.projectName=MERN-Backend \
                        -Dsonar.projectKey="MERN-Backend" \
                        -Dsonar.sources=. \

                        """
                    }
                }
            }
        }

        stage('SonarQube Quality Gate Check') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Trivy Image Security Scan') {
            steps {
                sh "trivy image --format json -o trivy-image.json ${DOCKER_IMAGE}"
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-image.json'
                }
            }
        }

        stage('Parallel Docker Push & Artifact Packaging') {
            parallel {
                stage('Push Docker Image to Docker Hub') {
                    steps {
                        withDockerRegistry([credentialsId: 'docker-hub', url: 'https://registry.hub.docker.com/v2/vikasprince']) {
                            sh "docker push ${DOCKER_IMAGE}"
                        }
                    }
                }
                
                stage('Package Artifact using npm pack') {
                    steps {
                        sh "npm pack --filename ${DOCKER_IMAGE}.tgz"
                    }
                }
            }
        }

        stage('Push Tarball to Nexus Repository') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'NEXUS_CREDENTIALS', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                sh """
                    echo "//3.109.153.126:8081/repository/backend-repo/:username=\${NEXUS_USER}" > ~/.npmrc
                    echo "//3.109.153.126:8081/repository/backend-repo/:_password=$(echo -n \${NEXUS_PASS} | base64)" >> ~/.npmrc
                    echo "//3.109.153.126:8081/repository/backend-repo/:always-auth=true" >> ~/.npmrc
                    npm publish food-d.tgz --registry=http://3.109.153.126:8081/repository/backend-repo/
                """
                }
            }
        }

        stage('GitOps Integration - Update Kubernetes Manifests') {
            steps {
                script {
                    sh """
                        git clone ${GIT_REPO} k8s-deployment
                        cd k8s-deployment
                        git config user.name 'jenkins'
                        git checkout -b update-${env.BUILD_NUMBER}
                        sed -i 's|image: .*|image: ${DOCKER_IMAGE}|' backend/overlays/stage/canary/deployment-patch.yaml
                        git add .
                        git commit -m "Updated image to ${DOCKER_IMAGE}"
                        git push origin update-${env.BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Raise Pull Request for Deployment') {
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    script {
                        sh """
                            cd k8s-deployment
                            gh auth login --with-token <<< "$GITHUB_TOKEN"
                            gh pr create --title 'Deploy ${DOCKER_IMAGE}' --body 'Automated PR from Jenkins' --base main --head update-${env.BUILD_NUMBER} --repo ${GITHUB_USER}/k8s-deployment
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                emailext(
                    to: "vikasprince30809@gmail.com",
                    subject: "Jenkins Build Notification: ${env.JOB_NAME}",
                    body: """
                    Hi Team,

                    The build for job '${env.JOB_NAME}' has completed!

                    Build Details:
                    - Build Number: ${env.BUILD_NUMBER}
                    - Build Status: ${currentBuild.currentResult}
                    - Build Duration: ${currentBuild.durationString}
                    - Build URL: ${env.BUILD_URL}

                    Reports are attached.

                    Regards,
                    Jenkins
                    """,
                    from: "jenkins@gmail.com",
                    attachmentsPattern: "eslint-report.log, mocha-reports/*.json, mocha-reports/*.html, trivy-filesystem.json, trivy-image.json"
                )
            }
        }
    }
}
